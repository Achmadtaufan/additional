WITH
	TRANSTYPE AS ( -- TREATED THIS ONE AS TABLE SETUP
		SELECT 'POS' TRANSTYPE, 'DS' ACCOUNTCODE, 'DIVIDEND' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'MS' ACCOUNTCODE, 'MATURITY' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'PS' ACCOUNTCODE, 'FREELOOK' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'DS' ACCOUNTCODE, 'DIVIDEND' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'SO' ACCOUNTCODE, 'SURRENDER' ACCOUNTNAME, 'SU' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'SO' ACCOUNTCODE, 'WITHDRAWAL' ACCOUNTNAME, 'IF' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'NS' ACCOUNTCODE, 'REFUND CONTRACT SUSPENSE' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'LS' ACCOUNTCODE, 'POLICY LOAN' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'CB' ACCOUNTCODE, 'NCB' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'EZ' ACCOUNTCODE, 'TAHAPAN' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'SR' ACCOUNTCODE, 'ROP' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'SL' ACCOUNTCODE, 'AUTO SURRENDER' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'S' ACCOUNTCODE, 'REFUND PREMIUM' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'POS' TRANSTYPE, 'DS' ACCOUNTCODE, 'DIVIDEND' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'DO' ACCOUNTCODE, 'MAJOR CLAIM DEATH' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'EG' ACCOUNTCODE, 'MAJOR CLAIM DEATH' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'ES' ACCOUNTCODE, 'MAJOR CLAIM DEATH' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'P1' ACCOUNTCODE, 'MAJOR CLAIM DEATH' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'VO' ACCOUNTCODE, 'MAJOR CLAIM DEATH' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'WO' ACCOUNTCODE, 'REGULAR PAYMENT' ACCOUNTNAME, '' POLSTAT
		UNION ALL SELECT 'CLAIM' TRANSTYPE, 'RB' ACCOUNTCODE, 'REGULAR PAYMENT' ACCOUNTNAME, '' POLSTAT
	),
	STG AS ( -- TO GET CLIENT BANK ACCOUNT IN STAGING
		SELECT B.* FROM (
			SELECT MAX(DATIME) DATIME,CLNTNUM,LTRIM(RTRIM(BANKACCKEY)) BANKACCKEY,BNKACTYP,BANKKEY
			FROM [STG].[dbo].[STG_LFCLNTBANKACC] WITH (NOLOCK)
			GROUP BY CLNTNUM,LTRIM(RTRIM(BANKACCKEY)),BNKACTYP,BANKKEY) A
		JOIN [STG].[dbo].[STG_LFCLNTBANKACC] B WITH (NOLOCK) 
			ON A.DATIME=B.DATIME AND A.CLNTNUM=B.CLNTNUM AND A.BANKACCKEY=LTRIM(RTRIM(B.BANKACCKEY)) AND A.BNKACTYP=B.BNKACTYP AND A.BANKKEY=B.BANKKEY
		),
	CHEQ AS ( -- TO GET PAYMENT RECORD THAT ALREADY JOINED WITH OTHERS TABLE
		SELECT A.*, C.GROUPNAME, B.POLICY_NUMBER, B.SUB_ACC_TYPE, B.EXCHANGE_RATE, D.BNKACTYP, D.BANKACCDSC
		FROM LF_PAYOUTBANKACCOUNT A WITH (NOLOCK)
		JOIN LF_PAYMENTREQUEST B WITH (NOLOCK) ON A.REQNNO = B.PAYMENT_NO AND A.COMPANY_CODE = B.COMPANY_CODE
		JOIN LF_USERDEPT C WITH (NOLOCK) ON A.REQUESTOR = C.USERID		
		LEFT JOIN STG D ON LTRIM(RTRIM(A.CLNTNUM01)) = LTRIM(RTRIM(D.CLNTNUM)) AND LTRIM(RTRIM(A.BANKACCKEY)) = LTRIM(RTRIM(D.BANKACCKEY))
		AND LTRIM(RTRIM(A.BANKKEY)) = LTRIM(RTRIM(D.BANKKEY)) AND A.FACTHOUS = D.FACTHOUS
	),
	ACMV AS ( -- TO GET ACMV RECORD STARTING FROM YEAR 2020 ONWARDS
		SELECT *
		FROM LF_ACCOUNTMOVEMENT WITH (NOLOCK)
		WHERE SUB_ACC_CODE = 'LP' AND YEAR(CAST(SYSTEMUPDATED_DATE AS DATE)) >= '2020'
	),
	ITEMTABL AS ( --> TO GET SETUP TABLE ONLY SPECIFIC SETUP USED
		SELECT *
		FROM LA_ITEMDESC WITH (NOLOCK)
		WHERE ITEMTABLE IN ('T3615','T3695','TR338','TY680') AND LANGUAGE = 'E'
	),
	CLAIMREC AS ( --> TO GET PAYMENT THAT CAME FROM CLAIM, THIS ONE TO DIFFERENCIATE THE INSURED PURPOSED
		SELECT A.REQNNO, A.POLICY_NUMBER, B.SUB_LEDGER_ACCOUNT_ENTITY, B.SUB_ACC_CODE, B.SUB_ACC_TYPE,
		B.ORIGINAL_CURR, B.ORI_AMOUNT_CURRENCY, B.CURRENCY_RATE, B.TRANS_DESCRIPTION, X.CLAIMNO
		FROM CHEQ A
		JOIN ACMV B ON A.REQNNO = B.DOC_NUM
		JOIN (
			SELECT A.COMPANYCODE AS COMPANYCODE, A.POLICYNUMBER, A.CLAIMNO, A.LIFE AS LIFE, B.CLIENT_ID AS INSURED_ID
			FROM LF_CLAIMDEATHHEADER A WITH (NOLOCK)
			JOIN LF_POLICYROLE B WITH (NOLOCK) ON A.POLICYNUMBER = B.POLICY_NUMBER AND A.LIFE = B.LIFEINSURED_SEQ
			UNION ALL
			SELECT C.CONT_HEADER_COMPANY AS COMPANYCODE, C.CONTRACT_NO AS POLICYNUMBER, C.CLAIMNO, C.LIFE_NO AS LIFE, C.CLAIM_PARTY INSURED_ID
			FROM LF_CLAIMREGULARPAYDTL C WITH (NOLOCK)
			) X ON X.CLAIMNO = B.TRANS_DESCRIPTION AND X.POLICYNUMBER = A.POLICY_NUMBER
	),
	CLAIM_INSURED AS ( --> TO GET INSURED NAME FROM CLAIM TRANSACTION
		SELECT DISTINCT 
			Y.REQNNO, X.POLICYNUMBER, X.CLAIMNO, X.LIFE, X.INSURED_ID,
			RTRIM(LTRIM(RTRIM(LTRIM(Z.FIRST_NAME)) + ' ' + RTRIM(LTRIM(Z.MIDDLE_NAME)) + ' ' + RTRIM(LTRIM(Z.SURNAME)))) INSURED_NAME
		FROM (
			SELECT A.COMPANYCODE AS COMPANYCODE, A.POLICYNUMBER, A.CLAIMNO, A.LIFE AS LIFE, B.CLIENT_ID AS INSURED_ID
			FROM LF_CLAIMDEATHHEADER A WITH (NOLOCK)
			JOIN LF_POLICYROLE B WITH (NOLOCK) ON A.POLICYNUMBER = B.POLICY_NUMBER AND A.LIFE = B.LIFEINSURED_SEQ
			UNION ALL
			SELECT C.CONT_HEADER_COMPANY AS COMPANYCODE, C.CONTRACT_NO AS POLICYNUMBER, C.CLAIMNO, C.LIFE_NO AS LIFE, C.CLAIM_PARTY INSURED_ID
			FROM LF_CLAIMREGULARPAYDTL C WITH (NOLOCK)
			) X
		JOIN LF_CLIENT Z WITH (NOLOCK) ON X.INSURED_ID = Z.CLIENT_ID
		JOIN CHEQ Y ON Y.POLICY_NUMBER = X.POLICYNUMBER
		JOIN CLAIMREC W ON W.REQNNO = Y.REQNNO
	),
	NONCLAIM_INSURED AS ( --> TO GET INSURED NAME FROM OTHERS THAN CLAIM TRANSACTION
		SELECT DISTINCT
		A.REQNNO, A.POLICY_NUMBER, '01' AS LIFE, ISNULL(D.CLAIMNO,'') AS CLAIMNO, C.CLIENT_ID, RTRIM(LTRIM(RTRIM(LTRIM(C.FIRST_NAME)) + ' ' + RTRIM(LTRIM(C.MIDDLE_NAME)) + ' ' + RTRIM(LTRIM(C.SURNAME)))) INSURED_NAME
		FROM TR_POLICY B WITH (NOLOCK) 
		JOIN LF_CLIENT C WITH (NOLOCK) ON C.CLIENT_ID = B.INSURED_ID
		JOIN CHEQ A ON A.POLICY_NUMBER = B.POLICY_NUMBER
		LEFT OUTER JOIN CLAIMREC D ON D.POLICY_NUMBER = A.POLICY_NUMBER AND D.REQNNO = A.REQNNO
		--WHERE NOT EXISTS (SELECT * FROM CLAIM_INSURED D WHERE D.REQNNO = A.REQNNO AND D.POLICYNUMBER = A.POLICY_NUMBER)
	),
	SWIFTCODE AS ( --> TO GET SWIFTCODE
		SELECT DISTINCT ITEMCODE AS BANKTYPE, TRIM(SUBSTRING(GENAREA,1,3)) CURRENCY, TRIM(SUBSTRING(GENAREA,46,15)) AS SWIFTCODE
		FROM ITEMTABL WHERE ITEMTABLE = 'TY680'
		UNION ALL
		SELECT DISTINCT ITEMCODE AS BANKTYPE, TRIM(SUBSTRING(GENAREA,4,3)) CURRENCY, TRIM(SUBSTRING(GENAREA,61,15)) AS SWIFTCODE
		FROM ITEMTABL WHERE ITEMTABLE = 'TY680'
	)
----------------------------------------------------------------------------------------------------------------------------------
---------------- SELECT FIELD SECTION --------------------------------------------------------------------------------------------
SELECT
	B.REQUESTOR AS USER_ID,
	B.GROUPNAME AS DEPARTMENT,
	(SELECT TL.LONGDESC FROM ITEMTABL TL WHERE TL.ITEMTABLE = 'T3615' AND TL.ITEMCODE = A.SOURCEOFBUSINESS) AS PARTNER,
	B.POLICY_NUMBER AS POLICY_NUMBER,
	B.REQNNO AS PAYMENT_NUMBER,
	CASE
		WHEN ISNULL((SELECT COUNT(1) FROM TRANSTYPE TY WHERE TY.ACCOUNTCODE = B.SUB_ACC_TYPE),0) > 0
			THEN CASE 
					WHEN B.SUB_ACC_TYPE = 'SO'
						THEN (SELECT TY1.ACCOUNTNAME FROM TRANSTYPE TY1 WHERE TY1.ACCOUNTCODE = B.SUB_ACC_TYPE AND A.POLICY_STATUS = TY1.POLSTAT)
				 ELSE (SELECT TY2.ACCOUNTNAME FROM TRANSTYPE TY2 WHERE TY2.ACCOUNTCODE = B.SUB_ACC_TYPE) END
		ELSE
			(SELECT TL1.LONGDESC FROM ITEMTABL TL1 WHERE TL1.ITEMCODE = B.SUB_ACC_TYPE) END AS [TYPE],

	CASE
		WHEN (SELECT TR.TRANSTYPE FROM TRANSTYPE TR WHERE TR.ACCOUNTCODE = B.SUB_ACC_TYPE) = 'CLAIM'
			THEN (SELECT CI.INSURED_NAME
				  FROM CLAIM_INSURED CI
				  JOIN CLAIMREC CR ON CR.POLICY_NUMBER = CI.POLICYNUMBER AND CR.REQNNO = CI.REQNNO AND CI.CLAIMNO = CR.TRANS_DESCRIPTION
			      WHERE CI.POLICYNUMBER = B.POLICY_NUMBER AND CI.REQNNO = B.REQNNO)
	ELSE (SELECT NCI.INSURED_NAME FROM NONCLAIM_INSURED NCI WHERE NCI.POLICY_NUMBER = B.POLICY_NUMBER AND NCI.REQNNO = B.REQNNO AND NCI.CLAIMNO = '')
	END AS INSURED_NAME,

	B.SUB_ACC_TYPE AS SUB_ACC_TYPE,
	B.EXCHANGE_RATE AS EXCHANGE_RATE,
	B.PAYCURR AS CURRENCY,
	ISNULL(B.BNKACTYP,'') AS BANKACCOUNTTYPE,
	CASE WHEN B.PAYCURR <> 'IDR' THEN B.PAYAMT ELSE '0' END AS AMOUNT_USD,
	CASE WHEN B.PAYCURR = 'IDR' THEN B.PAYAMT ELSE '0' END AS AMOUNT_IDR,
	ISNULL(B.BANKACCDSC,'') AS BENEF_NAME,
	B.BANKKEY AS BENEF_BANK,
	B.BANKACCKEY AS BENEF_ACCOUNT,
	(SELECT TL2.LONGDESC FROM ITEMTABL TL2
     WHERE TL2.ITEMTABLE = 'TR338' AND TL2.ITEMCODE = B.BNKACTYP ) AS BENEF_BANK_NAME,
	D.SWIFTCODE AS SWIFTCODE,
	CAST(CONVERT(VARCHAR(8),CASE WHEN ISNULL(CAST(B.REQDATE AS VARCHAR),'0') = '0' OR  CAST(B.REQDATE AS VARCHAR) ='99999999'THEN '19000101' ELSE CAST(B.REQDATE AS VARCHAR) END,120) AS DATE) AS RQ_CREATE_DATE,
	CAST(CONVERT(VARCHAR(8),CASE WHEN ISNULL(CAST(B.APPROVEDDATE AS VARCHAR),'0') = '0' OR  CAST(B.APPROVEDDATE AS VARCHAR) ='99999999'THEN '19000101' ELSE CAST(B.APPROVEDDATE AS VARCHAR) END,120) AS DATE) AS RQ_APPROVED_DATE,
	ISNULL(B.APPROVEDBY,'') AS APPROVED_USER,
	CAST(CONVERT(VARCHAR(8),CASE WHEN ISNULL(CAST(B.AUTHDATE AS VARCHAR),'0') = '0' OR  CAST(B.AUTHDATE AS VARCHAR) ='99999999'THEN '19000101' ELSE CAST(B.AUTHDATE AS VARCHAR) END,120) AS DATE) AS RQ_AUTHORISED_DATE,
	ISNULL(B.AUTHORIZEDBY,'') AS AUTHORISED_USER,
	B.REVIND AS REVERSAL,
	B.REQNTYPE AS REQNTYPE,
	B.PROCIND AS PROCESS_INDICATOR,
	B.REQNREV AS RQ_REVERSAL,
	CAST(B.DATIME AS VARCHAR) AS UPDATE_TIMESTAMP,
	CASE
		WHEN B.REVIND = 'Y' THEN 'REVERSAL'
		WHEN B.PROCIND = 'RC' THEN 'REJECT'
		WHEN (B.REQNTYPE IN ('4','R') AND B.PROCIND='PR') OR B.PROCIND ='AU' THEN 'PAYMENT AUTHORISED' 
	END AS PAYMENT_STATUS
FROM TR_POLICY A WITH (NOLOCK) 
JOIN CHEQ B ON A.POLICY_NUMBER = B.POLICY_NUMBER
LEFT JOIN SWIFTCODE D ON (CASE WHEN B.PAYCURR = 'IDR' THEN 'IDR' ELSE '***' END = D.CURRENCY) AND B.BNKACTYP = D.BANKTYPE




/*

Msg 512, Level 16, State 1, Line 1
Subquery returned more than 1 value. This is not permitted when the subquery follows =, !=, <, <= , >, >= or when the subquery is used as an expression.


*/
